/******************************************************************************

 @file       simple_peripheral.c

 @brief This file contains the Simple Peripheral sample application for use
        with the CC2650 Bluetooth Low Energy Protocol Stack.

 Group: CMCU, SCS
 Target Device: CC2640R2

 ******************************************************************************
 
 Copyright (c) 2013-2017, Texas Instruments Incorporated
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 *  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 *  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 *  Neither the name of Texas Instruments Incorporated nor the names of
    its contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 ******************************************************************************
 Release Name: simplelink_cc2640r2_sdk_1_40_00_45
 Release Date: 2017-07-20 17:16:59
 *****************************************************************************/

/*********************************************************************
 * INCLUDES
 */
#include <string.h>
#include <math.h>


#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Event.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Queue.h>

#include "hci_tl.h"
#include "gatt.h"
#include "linkdb.h"
#include "gapgattserver.h"
#include "gattservapp.h"

//#include <icall.h>
#include "util.h"

#include "devinfoservice.h"
#include "simple_gatt_profile.h"
#include "ll_common.h"

#if defined(FEATURE_OAD) || defined(IMAGE_INVALIDATE)
#include "oad_target.h"
#include "oad.h"
#endif //FEATURE_OAD || IMAGE_INVALIDATE

#include "peripheral.h"
#include "gapbondmgr.h"

#include "icall_api.h"
#include "icall_apimsg.h"
#include "osal_snv.h"

#ifdef USE_RCOSC
#include "rcosc_calibration.h"
#endif //USE_RCOSC

#include "board_key.h"

#include "board.h"

#include "simple_peripheral.h"

/* driver header files */
#include <ti/drivers/ADCBuf.h>
#include <ti/drivers/UART.h>
//#include <ti/drivers/PIN.h>
#include <ti/drivers/pin/PINCC26xx.h>
//#include <ti/drivers/GPIO.h>
//#include <ti/drivers/I2C.h>
#include "bsp_i2c.h"

//2592
#include <driverlib/ioc.h>

//clock 時間
#include "GUA_RTC.h" 

//power management
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>

#include <ti/devices/DeviceFamily.h>
#include DeviceFamily_constructPath(inc/hw_fcfg1.h)
#include DeviceFamily_constructPath(driverlib/aux_adc.h)
#include <driverlib/aux_wuc.h>

/*********************************************************************
 * CONSTANTS
 */

// Advertising interval when device is discoverable (units of 625us, 160=100ms)
#define DEFAULT_ADVERTISING_INTERVAL          160  //160

// General discoverable mode: advertise indefinitely
#define DEFAULT_DISCOVERABLE_MODE             GAP_ADTYPE_FLAGS_GENERAL

#ifndef FEATURE_OAD
// Minimum connection interval (units of 1.25ms, 80=100ms) if automatic
// parameter update request is enabled
#define DEFAULT_DESIRED_MIN_CONN_INTERVAL     80

// Maximum connection interval (units of 1.25ms, 800=1000ms) if automatic
// parameter update request is enabled
#define DEFAULT_DESIRED_MAX_CONN_INTERVAL     800
#else //!FEATURE_OAD
// Minimum connection interval (units of 1.25ms, 8=10ms) if automatic
// parameter update request is enabled
#define DEFAULT_DESIRED_MIN_CONN_INTERVAL     8

// Maximum connection interval (units of 1.25ms, 8=10ms) if automatic
// parameter update request is enabled
#define DEFAULT_DESIRED_MAX_CONN_INTERVAL     8
#endif // FEATURE_OAD

// Slave latency to use for automatic parameter update request
#define DEFAULT_DESIRED_SLAVE_LATENCY         0

// Supervision timeout value (units of 10ms, 1000=10s) for automatic parameter
// update request
#define DEFAULT_DESIRED_CONN_TIMEOUT          1000

// After the connection is formed, the peripheral waits until the central
// device asks for its preferred connection parameters
#define DEFAULT_ENABLE_UPDATE_REQUEST         GAPROLE_LINK_PARAM_UPDATE_WAIT_REMOTE_PARAMS

// Connection Pause Peripheral time value (in seconds)
#define DEFAULT_CONN_PAUSE_PERIPHERAL         6

// How often to perform periodic event (in msec)
#define SBP_PERIODIC_EVT_PERIOD               100 //5000

// Application specific event ID for HCI Connection Event End Events
#define SBP_HCI_CONN_EVT_END_EVT              0x0001
 
#ifdef FEATURE_OAD
// The size of an OAD packet.
#define OAD_PACKET_SIZE                       ((OAD_BLOCK_SIZE) + 2)
#endif // FEATURE_OAD

// Task configuration
#define SBP_TASK_PRIORITY                     1

#ifndef SBP_TASK_STACK_SIZE
#define SBP_TASK_STACK_SIZE                   644
#endif

// Internal Events for RTOS application
#define SBP_ICALL_EVT                         ICALL_MSG_EVENT_ID // Event_Id_31
#define SBP_QUEUE_EVT                         UTIL_QUEUE_EVENT_ID // Event_Id_30
#define SBP_PERIODIC_EVT                      Event_Id_00
#define SBP_STATE_CHANGE_EVT                  Event_Id_01         // add
#define SBP_CHAR_CHANGE_EVT                   Event_Id_02         // add
//#define SBP_PAIRING_STATE_EVT                 Event_Id_03         // add
//#define SBP_PASSCODE_NEEDED_EVT               Event_Id_04         // add

#define Magnetic_Buffer                       Event_Id_05
#define Parking                               Event_Id_06
#define SafeNotify                            Event_Id_07
#define Parking_init                          Event_Id_08
#define Magnetic_Stable                       Event_Id_09
#define Regulate                              Event_Id_10

// Bitwise OR of all events to pend on
#ifdef FEATURE_OAD
#define SBP_QUEUE_PING_EVT                    Event_Id_01

#define SBP_ALL_EVENTS                        (SBP_ICALL_EVT           | \
                                               SBP_QUEUE_EVT           | \
                                               SBP_PERIODIC_EVT        | \
                                               SBP_STATE_CHANGE_EVT    | \
                                               SBP_CHAR_CHANGE_EVT     | \
                                               Magnetic_Buffer         | \
                                               Parking                 | \
                                               SafeNotify              | \
                                               Parking_init            | \
                                               Magnetic_Stable         | \
                                               Regulate                | \
                                               SBP_QUEUE_PING_EVT)
#else
#define SBP_ALL_EVENTS                        (SBP_ICALL_EVT           | \
                                               SBP_QUEUE_EVT           | \
                                               SBP_PERIODIC_EVT        | \
                                               SBP_STATE_CHANGE_EVT    | \
                                               SBP_CHAR_CHANGE_EVT     | \
                                               Magnetic_Buffer         | \
                                               Parking                 | \
                                               SafeNotify              | \
                                               Parking_init            | \
                                               Magnetic_Stable         | \
                                               Regulate)
#endif /* FEATURE_OAD */


/*********************************************************************
 * TYPEDEFS
 */

// App event passed from profiles.
typedef struct
{
  appEvtHdr_t hdr;  // event header.
  uint8_t *pData;  // event data
} sbpEvt_t;

/*********************************************************************
 * GLOBAL VARIABLES
 */

/*********************************************************************
 * LOCAL VARIABLES              本地變數
 */
//廣播 adv
 uint8_t advopen = TRUE;
 uint8_t advclose = FALSE;
 
#define unknown 2
#define stop 2

// 讀mac//
static void GUA_Read_Mac(uint8 *pGUA_Address);  

//RoLa
static UART_Handle UART_handle;
static UART_Params UART_params;

//ADC
int ADC_Result=0;

//EMF
int EMF[100]={0};
int EMF_average;
int sum;

//I2C
//static I2C_Handle SbpI2cHandle;
//static I2C_Params SbpI2cParams;

uint8 ReadResult=0x08 ;

uint8 ReadResult_xH=0x00 ;
uint8 ReadResult_xL=0x00 ;
uint8 ReadResult_yH=0x00 ;
uint8 ReadResult_yL=0x00 ;
uint8 ReadResult_zH=0x00 ;
uint8 ReadResult_zL=0x00 ;
uint8 ReadResult_tH=0x00 ;
uint8 ReadResult_tL=0x00 ;
uint8 ReadResult_AH=0x00 ;
uint8 ReadResult_AL=0x00 ;

int16 result_x=0;  //合併後結果
int16 result_y=0;  //合併後結果
int16 result_z=0;  //合併後結果
int16 result_t=0;  //合併後結果

int16 result_total=0;
int16 before_result_total=0;

float Magnetic=0;
float before_Magnetic=0;

uint16 INum=0;

uint8 sign_x=2;
uint8 sign_y=2;
uint8 sign_z=2;
uint8 sign_t=2;

//LoRa
 uint8 txbuf[31] = {0x00};
enum
{
  init_state,
  Occupied_State,//占用 1
  Vacant_State,//空位 2
  Error_State,//錯誤3
  unknown_State,//未知4
};

enum
{
  slow,
  fast,
};

enum
{
  VOC,
  AMR,
};

#define Corrections_Num 10 //基準值校正次數
int RequireNum=0;  //特殊需求

//設定門檻次數
#define K_Value 1  //UnstableCount //5  //參數干擾要調整 這樣一定要在幾秒內產生多少不穩定
#define L_Value 30 //stableCount 30
#define M_value 5 //ErrorCount
#define N_value 2 //VacantStateCount,OccupiedStateCount

//快慢速(單位msec)
#define fast_speed 100
#define slow_speed 100  //100 2000

int16 Xstd=9999; 
int16 Ystd=9999;
int16 Zstd=9999;
int16 Vacant_standard_total=9999;

int32 VacantAdd_x=0;
int32 VacantAdd_y=0;
int32 VacantAdd_z=0;
int32 VacantAdd_total=0;

int32 OccupiedAdd_x=0;
int32 OccupiedAdd_y=0;
int32 OccupiedAdd_z=0;
int32 OccupiedAdd_total=0;

int ParkingState=init_state;

// Count 
int initCount=0;  //Corrections_Num=10   //int initCount=-1; //I2C第一次通匯傳0 但目前前5秒不動作 所以改回0
int OccupiedStateCount=0; //N_value=5
int VacantStateCount=0;     //N_value=5
int ErrorCount=0;               //M_value=5
int StableCount =0 ;           //L_Value=30
int UnstableCount =0 ;      //K_Value=1
int EqualStateCount=0;     //10
//int ExeCount=0;
int UnknownCount=0;
int StableCheckCount=0;
int UnStableCheckCount=0;
int SafeNotifyCount=-1;
int Data_Count=0;
//Flag
int init_flag=2;  //初始值為2 
int Occupied_flag=0;
int Vacant_flag=0;
int Error_flag=0;
int Corrections_flag=0;
int Correction_flag=false;
//int SafeNotifyFlag=false;
int IsOccupiedNotify=0;
int IsVacantNotify=0;
int IsUnknowNotify=0;
//時間
int timet[3]={0}; 
UTCTimeStruct GUA_Timer;

//Data
static uint8 newValue3[20]={0};
uint8 IosWriteData[11]={0};
int flashData=0;

//Speed
int speed=fast;
int Nowspeed=unknown;

//case
int priority=AMR;

//LED control
int led_open=1;
int led_close=0;

//State

int StateBuffer=init_state;
int before_StateBuffer=init_state;

//Check
int StableCheck=unknown;
int before_StableCheck=unknown;

int StableSignal = unknown;
int StateBufferChange=false;

/*********************************************************************
 * LOCAL VARIABLES
 */

// Entity ID globally used to check for source and/or destination of messages
static ICall_EntityID selfEntity;

// Event globally used to post local events and pend on system and
// local events.
static ICall_SyncHandle syncEvent;
//static ICall_Semaphore sem;//old

// Clock instances for internal periodic events.
static Clock_Struct periodicClock;

static Clock_Struct myClock_Parking;
static Clock_Struct myClock_init;
static Clock_Struct myClock_Buffer;
static Clock_Struct myClock_Stable;
static Clock_Struct myClock_Regulate;

static Clock_Struct accelReadClock; //notify
static Clock_Struct myClock_safe;

// Queue object used for app messages
static Queue_Struct appMsg;
static Queue_Handle appMsgQueue;

#if defined(FEATURE_OAD)
// Event data from OAD profile.
static Queue_Struct oadQ;
static Queue_Handle hOadQ;
#endif //FEATURE_OAD

// Task configuration
Task_Struct sbpTask;
Char sbpTaskStack[SBP_TASK_STACK_SIZE];

// Scan response data (max size = 31 bytes)
static uint8_t scanRspData[] =
{
 // complete name
  0x0A,   // length of this data
  GAP_ADTYPE_LOCAL_NAME_COMPLETE, 
  //P-b-SNode
  0x50,   // P
  0x2D,   // -
  0x62,   // b
  0x2D,   // -
  0x53,   //S
  0x4E,  //N
  0x6F,  //o 
  0x64,  //d 
  0x65,  //e
  
  // connection interval range
   0x05,   // length of this data
  GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE,
  LO_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL),   // 100ms
  HI_UINT16(DEFAULT_DESIRED_MIN_CONN_INTERVAL),
  LO_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),   // 1s
  HI_UINT16(DEFAULT_DESIRED_MAX_CONN_INTERVAL),

  // Tx power level
  0x02,   // length of this data
  GAP_ADTYPE_POWER_LEVEL,0       // 0dBm
};

static uint8_t ios_data[27]={0x00,0xFF,0x4c,0x00,0x02,0x15,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x99,0x99,0x99,0xc5};//[22]~[25]經緯, [6] 代表平版顯示T? 0X013=T1
static uint8_t routerData[31] ={0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x99,0x99,0x99,0x99,0x99,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x00,0x00,0x00,0x00,0x00,0x00};

// GAP - Advertisement data (max size = 31 bytes, though this is
// best kept short to conserve power while advertisting)
static uint8_t advertData[] =
{
  // Flags; this sets the device to use limited discoverable
  // mode (advertises for 30 seconds at a time) instead of general
  // discoverable mode (advertises indefinitely)
  0x02,   // length of this data
  GAP_ADTYPE_FLAGS,
  DEFAULT_DISCOVERABLE_MODE | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,

  // service UUID, to notify central devices what services are included
  // in this peripheral
#if !defined(FEATURE_OAD) || defined(FEATURE_OAD_ONCHIP)
  0x03,   // length of this data
#else //OAD for external flash
  0x05,  // lenght of this data
#endif //FEATURE_OAD
  GAP_ADTYPE_16BIT_MORE,      // some of the UUID's, but not all
#ifdef FEATURE_OAD
  LO_UINT16(OAD_SERVICE_UUID),
  HI_UINT16(OAD_SERVICE_UUID),
#endif //FEATURE_OAD
#ifndef FEATURE_OAD_ONCHIP
  LO_UINT16(SIMPLEPROFILE_SERV_UUID),
  HI_UINT16(SIMPLEPROFILE_SERV_UUID)
#endif //FEATURE_OAD_ONCHIP
};

// GAP GATT Attributes
static uint8_t attDeviceName[GAP_DEVICE_NAME_LEN] = "Parking";

// Globals used for ATT Response retransmission
static gattMsgEvent_t *pAttRsp = NULL;
static uint8_t rspTxRetry = 0;

/*********************************************************************
 * LOCAL FUNCTIONS
 */

static void SimpleBLEPeripheral_init( void );
static void SimpleBLEPeripheral_taskFxn(UArg a0, UArg a1);

static uint8_t SimpleBLEPeripheral_processStackMsg(ICall_Hdr *pMsg);
static uint8_t SimpleBLEPeripheral_processGATTMsg(gattMsgEvent_t *pMsg);
static void SimpleBLEPeripheral_processAppMsg(sbpEvt_t *pMsg);
static void SimpleBLEPeripheral_processStateChangeEvt(gaprole_States_t newState);
static void SimpleBLEPeripheral_processCharValueChangeEvt(uint8_t paramID);
static void SimpleBLEPeripheral_performPeriodicTask(void);
static void SimpleBLEPeripheral_clockHandler(UArg arg);

static void SimpleBLEPeripheral_sendAttRsp(void);
static void SimpleBLEPeripheral_freeAttRsp(uint8_t status);

static void SimpleBLEPeripheral_stateChangeCB(gaprole_States_t newState);
#ifndef FEATURE_OAD_ONCHIP
static void SimpleBLEPeripheral_charValueChangeCB(uint8_t paramID);
#endif //!FEATURE_OAD_ONCHIP
static uint8_t SimpleBLEPeripheral_enqueueMsg(uint8_t event, uint8_t state,
                                              uint8_t *pData);
#ifdef FEATURE_OAD
void SimpleBLEPeripheral_processOadWriteCB(uint8_t event, uint16_t connHandle,
                                           uint8_t *pData);
#endif //FEATURE_OAD

//AMR
static void AMR_Read(void);

static void Time(void);

static void Calibration(void);

static void Car_in(void);

static void Car_out(void);

static void Car_Unknow(void);

static void LoRa(void);

static void Voltage(void);
/*********************************************************************
 * EXTERN FUNCTIONS
 */
extern void AssertHandler(uint8 assertCause, uint8 assertSubcause);

/*********************************************************************
 * PROFILE CALLBACKS
 */

// Peripheral GAPRole Callbacks
static gapRolesCBs_t SimpleBLEPeripheral_gapRoleCBs =
{
  SimpleBLEPeripheral_stateChangeCB     // GAPRole State Change Callbacks
};

// GAP Bond Manager Callbacks
// These are set to NULL since they are not needed. The application
// is set up to only perform justworks pairing.
static gapBondCBs_t simpleBLEPeripheral_BondMgrCBs =
{
  NULL,//(pfnPasscodeCB_t) SimpleBLEPeripheral_passcodeCB, // Passcode callback
  NULL//SimpleBLEPeripheral_pairStateCB                   // Pairing / Bonding state Callback
};

// Simple GATT Profile Callbacks
#ifndef FEATURE_OAD_ONCHIP
static simpleProfileCBs_t SimpleBLEPeripheral_simpleProfileCBs =
{
  SimpleBLEPeripheral_charValueChangeCB // Characteristic value change callback
};
#endif //!FEATURE_OAD_ONCHIP

#ifdef FEATURE_OAD
static oadTargetCBs_t simpleBLEPeripheral_oadCBs =
{
  SimpleBLEPeripheral_processOadWriteCB // Write Callback.
};
#endif //FEATURE_OAD

/*********************************************************************
 * PUBLIC FUNCTIONS
 */

//PIN
static void buttonHwiFxn(PIN_Handle hPin, PIN_Id pinId)
{
// set event in SBP task to process outside of hwi context

Event_post(syncEvent, SBP_PERIODIC_EVT); // Add

}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_createTask
 *
 * @brief   Task creation function for the Simple Peripheral.
 *
 * @param   None.
 *
 * @return  None.
 */
void SimpleBLEPeripheral_createTask(void)
{
  Task_Params taskParams;

  // Configure task
  Task_Params_init(&taskParams);
  taskParams.stack = sbpTaskStack;
  taskParams.stackSize = SBP_TASK_STACK_SIZE;
  taskParams.priority = SBP_TASK_PRIORITY;

  Task_construct(&sbpTask, SimpleBLEPeripheral_taskFxn, &taskParams, NULL);
}

/****************************PIN*/
static PIN_Config SBP_configTable[] =
{
Board_LED_R| PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX, ///5xd IOID_10  led  //PIN_GPIO_LOW
Board_LED_G| PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
//Board_LED_B| PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,

LED_Control| PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,


Lora       | PIN_GPIO_OUTPUT_EN  | PIN_GPIO_HIGH   | PIN_PULLUP,                     //IOID_5
POWER      | PIN_GPIO_OUTPUT_EN  | PIN_GPIO_HIGH   | PIN_PULLUP,                     //IOID_6 
Board_EMF  | PIN_GPIO_OUTPUT_DIS | PIN_INPUT_EN    | PIN_NOPULL,                     //IOID_8
Battery    | PIN_GPIO_OUTPUT_DIS | PIN_INPUT_EN    | PIN_NOPULL,                     //IOID_10
Board_PA   | PIN_GPIO_OUTPUT_EN  | PIN_GPIO_HIGH   | PIN_PUSHPULL,                   //IOID_7
Board_LNA  | PIN_GPIO_OUTPUT_EN  | PIN_GPIO_HIGH   | PIN_PUSHPULL,                   //IOID_13
Board_HGM  | PIN_GPIO_OUTPUT_EN  | PIN_GPIO_HIGH   | PIN_PUSHPULL,                   //IOID_14
NBIoT      | PIN_GPIO_OUTPUT_EN  | PIN_GPIO_LOW    | PIN_PULLUP,                     //IOID_3

//Board_SDA | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX, //11
//Board_SCL | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,//12

//Board_UART_TX    | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH   | PIN_PUSHPULL, 
//Board_UART_RX    | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH   | PIN_PUSHPULL, 

PIN_TERMINATE //PIN END
};
static PIN_State sbpPins;
static PIN_Handle hSbpPins;



/*************************ADC INTI*/

static void init_adc(void)
{
    //intialisation of ADC

    // Enable clock for ADC digital and analog interface (not currently enabled in driver)
    AUXWUCClockEnable(AUX_WUC_ADI_CLOCK|AUX_WUC_SOC_CLOCK);   // was : AUX_WUC_MODCLKEN0_SOC_M|AUX_WUC_MODCLKEN0_AUX_ADI4_M);
    
    // Connect AUX IO7 (DIO23, but also DP2 on XDS110) as analog input.
    AUXADCSelectInput(ADC_COMPB_IN_AUXIO5); //ADC讀取腳位 5xd  dio10
     
    // Set up ADC range
    // AUXADC_REF_FIXED = nominally 4.3 V
    AUXADCEnableSync(AUXADC_REF_FIXED,  AUXADC_SAMPLE_TIME_2P7_US, AUXADC_TRIGGER_MANUAL);    
}


/*
  static void init_emf(void)
  {
      //intialisation of ADC

      // Enable clock for ADC digital and analog interface (not currently enabled in driver)
      AUXWUCClockEnable(AUX_WUC_ADI_CLOCK|AUX_WUC_SOC_CLOCK);   // was : AUX_WUC_MODCLKEN0_SOC_M|AUX_WUC_MODCLKEN0_AUX_ADI4_M);
      
      // Connect AUX IO7 (DIO23, but also DP2 on XDS110) as analog input.
      AUXADCSelectInput(ADC_COMPB_IN_AUXIO6); //ADC讀取腳位 5xd  dio8
       
      // Set up ADC range
      // AUXADC_REF_FIXED = nominally 4.3 V
      AUXADCEnableSync(AUXADC_REF_FIXED,  AUXADC_SAMPLE_TIME_2P7_US, AUXADC_TRIGGER_MANUAL);  
  
}
*/


/*********************************************************************
 * @fn      SimpleBLEPeripheral_init
 *
 * @brief   Called during initialization and contains application
 *          specific initialization (ie. hardware initialization/setup,
 *          table initialization, power up notification, etc), and
 *          profile initialization/setup.
 *
 * @param   None.
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_init(void)
{
    //LoRa

UART_init();
UART_Params_init(&UART_params);
UART_params.baudRate = 9600;
UART_handle = UART_open(Board_UART0, &UART_params);  
   // 時間
  GUA_RTC_Init(); 
  
  //HCI_EXT_SetRxGainCmd(HCI_EXT_RX_GAIN_HIGH);
  //HCI_EXT_SetTxPowerCmd( HCI_EXT_TX_POWER_MINUS_9_DBM);
  
  //PIN
  // Open pin structure for use
  hSbpPins = PIN_open(&sbpPins, SBP_configTable);
  // Register ISR
  PIN_registerIntCb(hSbpPins, buttonHwiFxn);
  // Configure interrupt
  PIN_setConfig(hSbpPins, PIN_BM_IRQ, Board_KEY_UP | PIN_IRQ_NEGEDGE);
  // Enable wakeup
  PIN_setConfig(hSbpPins, PINCC26XX_BM_WAKEUP, Board_KEY_UP|PINCC26XX_WAKEUP_NEGEDGE);      
   
   //寫入時間
   GUA_Timer.hour = 0;    
   GUA_Timer.minutes = 0;  
   GUA_Timer.seconds = 0;
   GUA_RTC_Set(&GUA_Timer);   
  
  // ******************************************************************
  // N0 STACK API CALLS CAN OCCUR BEFORE THIS CALL TO ICall_registerApp
  // ******************************************************************
  // Register the current thread as an ICall dispatcher application
  // so that the application can send and receive messages.
  ICall_registerApp(&selfEntity, &syncEvent);

#ifdef USE_RCOSC
  RCOSC_enableCalibration();
#endif // USE_RCOSC

#if defined( USE_FPGA )
  // configure RF Core SMI Data Link
  IOCPortConfigureSet(IOID_12, IOC_PORT_RFC_GPO0, IOC_STD_OUTPUT);
  IOCPortConfigureSet(IOID_11, IOC_PORT_RFC_GPI0, IOC_STD_INPUT);

  // configure RF Core SMI Command Link
  IOCPortConfigureSet(IOID_10, IOC_IOCFG0_PORT_ID_RFC_SMI_CL_OUT, IOC_STD_OUTPUT);
  IOCPortConfigureSet(IOID_9, IOC_IOCFG0_PORT_ID_RFC_SMI_CL_IN, IOC_STD_INPUT);

  // configure RF Core tracer IO
  IOCPortConfigureSet(IOID_8, IOC_PORT_RFC_TRC, IOC_STD_OUTPUT);
#else // !USE_FPGA
  #if defined( DEBUG_SW_TRACE )
    // configure RF Core tracer IO
    IOCPortConfigureSet(IOID_8, IOC_PORT_RFC_TRC, IOC_STD_OUTPUT | IOC_CURRENT_4MA | IOC_SLEW_ENABLE);
  #endif // DEBUG_SW_TRACE
#endif // USE_FPGA

 //2592//bleUserConfig 搜尋找.c 有txpower對造表.txpower初始值設定
  
  
  // Map RFC_GPO0 to DIO13
  IOCPortConfigureSet(IOID_13, IOC_PORT_RFC_GPO0,
  IOC_IOMODE_NORMAL);
  // Map RFC_GPO1 to DIO7
  IOCPortConfigureSet(IOID_7, IOC_PORT_RFC_GPO1,
  IOC_IOMODE_NORMAL); 
   
  
  //db 調整 需在ICall_registerApp後
  HCI_EXT_SetTxPowerCmd(HCI_EXT_TX_POWER_5_DBM);  //output 20.9 dbm on CC2592   //POWER3
  
  uint8 bdAddress[B_ADDR_LEN]={0};
   
   //將mac讀出
GUA_Read_Mac(bdAddress);   
   //辨識碼+解碼
routerData[0]=0x40;
routerData[1]=0x00;
   //mac address
routerData[2]=bdAddress[0]; 
routerData[3]=bdAddress[1]; 
routerData[4]=bdAddress[2]; 
routerData[5]=bdAddress[3]; 
routerData[6]=bdAddress[4];
routerData[7]=bdAddress[5];  
  //flash讀入
osal_snv_read(0x80, 11, &IosWriteData[0]);
  
flashData = IosWriteData[0];
routerData[10] = IosWriteData[1];//經H
routerData[11] = IosWriteData[2];//經L
routerData[12] = IosWriteData[3];//緯H
routerData[13] = IosWriteData[4];//緯L
routerData[14] = IosWriteData[5];//高M(樓層)  小於100
routerData[15] = IosWriteData[6];//高L(高度)         
routerData[16] = IosWriteData[7];//區域碼        
routerData[17] = IosWriteData[8];//車位英文
routerData[18] = IosWriteData[9];//車位數字
routerData[19] = IosWriteData[10];//車位數字  
 
  // Hard code the BD Address till CC2650 board gets its own IEEE address
  //uint8 bdAddress[B_ADDR_LEN] = { 0xAA, 0x01, 0xFF, 0xFF, 0xFF, 0xFF }; //ios讀值需設回原本
  //HCI_EXT_SetBDADDRCmd(bdAddress);

  // Set device's Sleep Clock Accuracy
  //HCI_EXT_SetSCACmd(40);
				    
  // Create an RTOS queue for message from profile to be sent to app.
  appMsgQueue = Util_constructQueue(&appMsg);

  // Set GAP Parameters: After a connection was established, delay in seconds
  // before sending when GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE,...)
  // uses GAPROLE_LINK_PARAM_UPDATE_INITIATE_BOTH_PARAMS or
  // GAPROLE_LINK_PARAM_UPDATE_INITIATE_APP_PARAMS
  // For current defaults, this has no effect.
  GAP_SetParamValue(TGAP_CONN_PAUSE_PERIPHERAL, DEFAULT_CONN_PAUSE_PERIPHERAL);
  
  // Setup the Peripheral GAPRole Profile. For more information see the User's
  // Guide:
  // http://software-dl.ti.com/lprf/sdg-latest/html/
  {
    // Device starts advertising upon initialization of GAP
    uint8_t initialAdvertEnable = TRUE;

    // By setting this to zero, the device will go into the waiting state after
    // being discoverable for 30.72 second, and will not being advertising again
    // until re-enabled by the application
    //uint16_t advertOffTime = 0;

    uint8_t enableUpdateRequest = DEFAULT_ENABLE_UPDATE_REQUEST;
    uint16_t desiredMinInterval = DEFAULT_DESIRED_MIN_CONN_INTERVAL;
    uint16_t desiredMaxInterval = DEFAULT_DESIRED_MAX_CONN_INTERVAL;
    uint16_t desiredSlaveLatency = DEFAULT_DESIRED_SLAVE_LATENCY;
    uint16_t desiredConnTimeout = DEFAULT_DESIRED_CONN_TIMEOUT;

    // Set the Peripheral GAPRole Parameters
    // Set the GAP Role Parameters
    GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t), &initialAdvertEnable);//開關
    // GAPRole_SetParameter(GAPROLE_ADVERT_OFF_TIME, sizeof(uint16_t),
    //                      &advertOffTime);//若為0設定為廣30.72
    
    GAPRole_SetParameter(GAPROLE_SCAN_RSP_DATA, sizeof(scanRspData),scanRspData);//廣播封包2
									  
    GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(advertData), advertData);//廣播封包1  (原先註解)
    GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(ios_data), ios_data);//廣播ios資訊

    GAPRole_SetParameter(GAPROLE_PARAM_UPDATE_ENABLE, sizeof(uint8_t),
                         &enableUpdateRequest);
    GAPRole_SetParameter(GAPROLE_MIN_CONN_INTERVAL, sizeof(uint16_t),
                         &desiredMinInterval);
    GAPRole_SetParameter(GAPROLE_MAX_CONN_INTERVAL, sizeof(uint16_t),
                         &desiredMaxInterval);
    GAPRole_SetParameter(GAPROLE_SLAVE_LATENCY, sizeof(uint16_t),
                         &desiredSlaveLatency);
    GAPRole_SetParameter(GAPROLE_TIMEOUT_MULTIPLIER, sizeof(uint16_t),
                         &desiredConnTimeout);
  }

  // Set the Device Name characteristic in the GAP GATT Service
  // For more information, see the section in the User's Guide:
  // http://software-dl.ti.com/lprf/sdg-latest/html
  GGS_SetParameter(GGS_DEVICE_NAME_ATT, GAP_DEVICE_NAME_LEN, attDeviceName);

  // Set GAP Parameters to set the advertising interval
  // For more information, see the GAP section of the User's Guide:
  // http://software-dl.ti.com/lprf/sdg-latest/html
  {
    // Use the same interval for general and limited advertising.
    // Note that only general advertising will occur based on the above configuration
    uint16_t advInt = DEFAULT_ADVERTISING_INTERVAL;

    GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MIN, advInt);
    GAP_SetParamValue(TGAP_LIM_DISC_ADV_INT_MAX, advInt);
    GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MIN, advInt);
    GAP_SetParamValue(TGAP_GEN_DISC_ADV_INT_MAX, advInt);
  }

  // Setup the GAP Bond Manager. For more information see the section in the
  // User's Guide:
  // http://software-dl.ti.com/lprf/sdg-latest/html/
  {
    // Don't send a pairing request after connecting; the peer device must
    // initiate pairing
    //uint32_t passkey = 0; // passkey "000000"//migrate
    uint8_t pairMode = GAPBOND_PAIRING_MODE_WAIT_FOR_REQ;
    // Use authenticated pairing: require passcode.
    uint8_t mitm = TRUE;
    //uint8_t ioCap = GAPBOND_IO_CAP_DISPLAY_ONLY;
    uint8_t ioCap = GAPBOND_IO_CAP_NO_INPUT_NO_OUTPUT;
    // Request bonding (storing long-term keys for re-encryption upon subsequent
    // connections without repairing)
    uint8_t bonding = TRUE;

    //GAPBondMgr_SetParameter(GAPBOND_DEFAULT_PASSCODE, sizeof(uint32_t),
    //                        &passkey);//migrate
    GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &pairMode);
    GAPBondMgr_SetParameter(GAPBOND_MITM_PROTECTION, sizeof(uint8_t), &mitm);
    GAPBondMgr_SetParameter(GAPBOND_IO_CAPABILITIES, sizeof(uint8_t), &ioCap);
    GAPBondMgr_SetParameter(GAPBOND_BONDING_ENABLED, sizeof(uint8_t), &bonding);
  }

  // Initialize GATT attributes
  GGS_AddService(GATT_ALL_SERVICES);           // GAP GATT Service
  GATTServApp_AddService(GATT_ALL_SERVICES);   // GATT Service
  DevInfo_AddService();                        // Device Information Service
  SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile

#ifndef FEATURE_OAD_ONCHIP
  SimpleProfile_AddService(GATT_ALL_SERVICES); // Simple GATT Profile
#endif //!FEATURE_OAD_ONCHIP

#ifdef FEATURE_OAD
  VOID OAD_addService();                 // OAD Profile
  OAD_register((oadTargetCBs_t *)&simpleBLEPeripheral_oadCBs);
  hOadQ = Util_constructQueue(&oadQ);
#endif //FEATURE_OAD

#ifdef IMAGE_INVALIDATE
  Reset_addService();
#endif //IMAGE_INVALIDATE


#ifndef FEATURE_OAD_ONCHIP
  // Setup the SimpleProfile Characteristic Values
  {
    uint8_t charValue1 = 1;
    uint8_t charValue2 = 2;
    uint8_t charValue3 = 3;
    uint8_t charValue4 = 4;
    uint8_t charValue5[SIMPLEPROFILE_CHAR5_LEN] = { 1, 2, 3, 4, 5 };

    SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR1, sizeof(uint8_t),
                               &charValue1);
    SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR2, sizeof(uint8_t),
                               &charValue2);
    SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR3, sizeof(uint8_t),
                               &charValue3);
    SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8_t),
                               &charValue4);
    SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR5, SIMPLEPROFILE_CHAR5_LEN,
                               charValue5);
  }

  // Register callback with SimpleGATTprofile
  SimpleProfile_RegisterAppCBs(&SimpleBLEPeripheral_simpleProfileCBs);
#endif //!FEATURE_OAD_ONCHIP

  // Start the Device
  VOID GAPRole_StartDevice(&SimpleBLEPeripheral_gapRoleCBs);

  // Start Bond Manager
  VOID GAPBondMgr_Register(&simpleBLEPeripheral_BondMgrCBs);

  // Register with GAP for HCI/Host messages
  GAP_RegisterForMsgs(selfEntity);

  // Register for GATT local events and ATT Responses pending for transmission
  GATT_RegisterForMsgs(selfEntity);

  //This should be included only if 4.2 length extension feature is enable....
  //HCI_LE_ReadMaxDataLenCmd();

#if !defined (USE_LL_CONN_PARAM_UPDATE)
  // Get the currently set local supported LE features
  // The HCI will generate an HCI event that will get received in the main
  // loop
  HCI_LE_ReadLocalSupportedFeaturesCmd();
#endif // !defined (USE_LL_CONN_PARAM_UPDATE)

 //I2C
 bspI2cInit(); 
 // 
 
 uint8 Data2[2]={0};
 Data2[0]= 0x0B;
 Data2[1]= 0X0D;
 bspI2cWrite(Data2,2);

  //初始LED燈設定    
  PIN_setOutputValue(hSbpPins, LED_Control,1); //0設定三顆都亮
  PIN_setOutputValue(hSbpPins, Board_LED_R,0);  //設定紅燈亮  
  PIN_setOutputValue(hSbpPins, Board_LED_G,1); //設定綠燈亮   
  
 //Calibration
Util_constructClock( &myClock_Regulate, SimpleBLEPeripheral_clockHandler,100, 100, false, Regulate); //校正事件 0.1S

//Magnetic_Stable   
Util_constructClock( &myClock_Stable, SimpleBLEPeripheral_clockHandler,100, 100, false, Magnetic_Stable); //磁場穩定 0.1S
										
//Parking_init
Util_constructClock( &myClock_init, SimpleBLEPeripheral_clockHandler,1000, 1000, false, Parking_init); //初始事件 1S  

//Parking
Util_constructClock( &myClock_Parking, SimpleBLEPeripheral_clockHandler,1000, 1000, false, Parking); //主程式1S

//Magnetic_Buffer
Util_constructClock( &myClock_Buffer, SimpleBLEPeripheral_clockHandler,2000, 2000, false, Magnetic_Buffer); //磁場大小 2S
       
// notify 
//Util_constructClock(&accelReadClock, SimpleBLEPeripheral_clockHandler,200, 0, false, KFD_ACCEL_READ_EVT);

//Safe 30分鐘  //1800000  60000  回報 
Util_constructClock( &myClock_safe, SimpleBLEPeripheral_clockHandler,1800000, 1800000, false,SafeNotify );//報平安

  //第一時間(由Util_startClock呼叫的計時時間),第二時間(自己跑這行的計時時間) ,FALSE(不跑，僅用Util_startClock()跑),最後為要跳的EVENT
  // 若為true， 則第一值為第一次觸發的時間，第二值為之後觸發的時間 //為false，Util_startClock觸發才能動作，第一值為第一次的觸發時間，第二值為之後觸發的時間，若為 0只觸發一次，若非0需使用stop才能停止。 
 
  Util_startClock(&myClock_init);
  Util_startClock(&myClock_safe);//啟動三十分鐘安全回報
}
  
/*********************************************************************
 * @fn      SimpleBLEPeripheral_taskFxn
 *
 * @brief   Application task entry point for the Simple Peripheral.
 *
 * @param   a0, a1 - not used.
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_taskFxn(UArg a0, UArg a1)
{
  // Initialize application
  SimpleBLEPeripheral_init();

  // Application main loop
  for (;;)
  {
    uint32_t events;

    // Waits for an event to be posted associated with the calling thread.
    // Note that an event associated with a thread is posted when a
    // message is queued to the message receive queue of the thread
    events = Event_pend(syncEvent, Event_Id_NONE, SBP_ALL_EVENTS,
                        ICALL_TIMEOUT_FOREVER);

    if (events)
    {
      ICall_EntityID dest;
      ICall_ServiceEnum src;
      ICall_HciExtEvt *pMsg = NULL;

      // Fetch any available messages that might have been sent from the stack
      if (ICall_fetchServiceMsg(&src, &dest,
                                (void **)&pMsg) == ICALL_ERRNO_SUCCESS)
      {
        uint8 safeToDealloc = TRUE;

        if ((src == ICALL_SERVICE_CLASS_BLE) && (dest == selfEntity))
        {
          ICall_Stack_Event *pEvt = (ICall_Stack_Event *)pMsg;

          // Check for BLE stack events first
          if (pEvt->signature == 0xffff)
          {
            // The GATT server might have returned a blePending as it was trying
            // to process an ATT Response. Now that we finished with this
            // connection event, let's try sending any remaining ATT Responses
            // on the next connection event.
            if (pEvt->event_flag & SBP_HCI_CONN_EVT_END_EVT)
            {
              // Try to retransmit pending ATT Response (if any)
              SimpleBLEPeripheral_sendAttRsp();
            }
          }
          else
          {
            // Process inter-task message
            safeToDealloc = SimpleBLEPeripheral_processStackMsg((ICall_Hdr *)pMsg);
          }
        }

        if (pMsg && safeToDealloc)
        {
          ICall_freeMsg(pMsg);
        }
      }

      // If RTOS queue is not empty, process app message.
      if (events & SBP_QUEUE_EVT)
      {
        while (!Queue_empty(appMsgQueue))
        {
          sbpEvt_t *pMsg = (sbpEvt_t *)Util_dequeueMsg(appMsgQueue);
          if (pMsg)
          {
            // Process message.
            SimpleBLEPeripheral_processAppMsg(pMsg);

            // Free the space from the message.
            ICall_free(pMsg);
          }
        }
      }

      if(events & Magnetic_Stable) //磁場穩定判斷0.1S讀一次
      {
        events &= ~Magnetic_Stable;
      
        AMR_Read();   
       //=== 穩定狀態判斷 stable signal===//
       
        //不穩定
        if(init_flag==1  &&  (fabs(Magnetic-before_Magnetic)>=2.5 ))
        {
          UnstableCount++;
          
          PIN_setOutputValue(hSbpPins, Board_LED_G , 0); 
          PIN_setOutputValue(hSbpPins, Board_LED_R , 1); 
          PIN_setOutputValue(hSbpPins, LED_Control,1); 
          
          if(StateBufferChange==true)//判斷階段若出現不穩定
          {                   
              StableCheck=unknown;
              StateBufferChange=stop;            
          }         
                  
          if ( UnstableCount == K_Value)
          {                                
              StableCount = 0 ;
              UnstableCount = 0;
              before_StateBuffer=init_state;
             
              PIN_setOutputValue(hSbpPins, Board_LED_G , 0); 
              PIN_setOutputValue(hSbpPins, Board_LED_R , 0); 
              PIN_setOutputValue(hSbpPins, LED_Control,1); 
              
              StableSignal = false;                      
          }          
        }
      
      //穩定
      else if(init_flag==1 && fabs(Magnetic-before_Magnetic)<2.5)// && StableSignal==unknown
        {
          StableCount++;   
           
          PIN_setOutputValue(hSbpPins, Board_LED_G,0); 
          PIN_setOutputValue(hSbpPins, Board_LED_R,0); 
          PIN_setOutputValue(hSbpPins, LED_Control,1);    
          
          if ( StableCount == L_Value)//30
          {
              StableCount=0;
              UnstableCount = 0;
              
              VacantAdd_x=0,OccupiedAdd_x=0;
              VacantAdd_y=0,OccupiedAdd_y=0;
              VacantAdd_z=0,OccupiedAdd_z=0;
              VacantAdd_total=0,OccupiedAdd_total=0;             
           
              StableSignal = true;  
          }          
        }   
//=== 穩定狀態判斷 stable signal===//

//===Stable StableSignal===  // 
        if(fabs(Magnetic-before_Magnetic)<3)//要連續穩定
        { 
          StableCheckCount++;       
          if(StableCheckCount==40)
          {
           StableCheck=true;
           StableCheckCount=0;
           Util_startClock(&myClock_Parking);
          }
        }
     
        else //不穩定
        {      
           UnStableCheckCount++;
           StableCheckCount=0;//每次都歸零      
           if(UnStableCheckCount==1) // 持續不穩定回報
           {                          
             StableCheck=false;        
             StableSignal=unknown;                   
           }      
        }  
     //===Stable Check===  // 

      }
      
      if (events & Magnetic_Buffer) //磁場大小2S讀一次
      {
         events &= ~Magnetic_Buffer;
      
         Voltage();
         AMR_Read(); 
         before_StateBuffer=StateBuffer;
     
         if(Magnetic<=10)
         {
              StateBuffer=Vacant_State;             
         }
     
         else if( Magnetic>20 && Magnetic<= 500)
         { 
            StateBuffer=Occupied_State;
         }
         else
         {
            StateBuffer=unknown_State;
         }
      
         if(before_StateBuffer!=StateBuffer)
         {
            Util_startClock(&myClock_Stable);
         }
    
      }
            
      if (events & Parking_init) //單次初始事件 1s
      {
        events &= ~Parking_init;      
      
        Data_Count++;
      
         //===設定資料輸入10s===  
        // if(init_flag==2 && flashData==1  && Data_Count == 10)//經緯度有設定過
        if(init_flag==2  && Data_Count >= 10) //ignore 經緯度
        {
              PIN_setOutputValue(hSbpPins, Board_LED_G ,0);     //關綠燈
              PIN_setOutputValue(hSbpPins, Board_LED_R ,0);     //關紅燈
              init_flag=0;   
              Util_stopClock(&myClock_init);
              Util_startClock(&myClock_Regulate);                     
        }   
/*      
     // 兩分鐘到 且 沒資料寫入 睡
        if(Data_Count == 120 && flashData==0 )
        { 
              PIN_setOutputValue(hSbpPins, Board_LED_G ,0);     //關綠燈
              PIN_setOutputValue(hSbpPins, Board_LED_R ,0);     //關紅燈         
              uint8_t advclose = FALSE;//關廣播
              GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advclose); 
              
              Util_stopClock(&myClock_init);                
              //Power_shutdown(NULL); //關閉電源
        } 
*/      
      }

      if(events & Regulate) //校正
      {
         events &= ~Regulate;

        //===初值基準校正===     
        if((ParkingState == init_state||Vacant_State) && (init_flag == 0||1))
        {     
          AMR_Read();
          Calibration();    //校正      
        }    
        Util_startClock(&myClock_Buffer); 
      }

      if (events & Parking) //主程式
      {
        events &= ~Parking;           
               
        Time();

       
        //StateBufferChange//
        if(StableCheck==true )
        {       
           if( StateBuffer == ParkingState && OccupiedStateCount==0 && VacantStateCount==0)
           { 
              EqualStateCount++;
              StateBufferChange=false;
        
              if(EqualStateCount==N_value)
              {   
                 EqualStateCount=0;

                 StableSignal=unknown;           
                 StableCheck=unknown;
              }
       
           }
        }  
        else 
        {
           EqualStateCount=0;
           StateBufferChange=true;
           StableSignal=unknown;//同步開啟穩定判斷
        } 
      }
  
     //=== 判斷有無車輛 ===
    
     //int IsOccupiedNotify=0;
     //int IsVacantNotify=0;
    
     if(StableCheck==true || StableSignal==true)
     {
        Util_stopClock(&myClock_Stable);
       //無車 >>> 有車 
       if( init_flag == 1 && (StateBuffer==Occupied_State  || IsOccupiedNotify == 1 ) && Occupied_flag == 0)//1227 加abs  // Occupied_flag==1 表此狀態流程結束待轉態完成後才能再次進入
       { 
         Car_in();         
       }
       //無車 >>> 有車 end     
      
       //有車 >>> 無車
       else if((init_flag == 1)  && (StateBuffer==Vacant_State|| IsVacantNotify == 1) && (Vacant_flag == 0) && (Error_flag==0 ))//1227 加abs  // Vacant_flag==1 表此狀態流程結束待轉態完成後才能再次進入
       { 
          Car_out();    
       }//有車 >>> 無車 end
    
     else if((init_flag == 1)  && (StateBuffer==Vacant_State|| IsUnknowNotify == 1))
       {     
          Car_Unknow();
       }
     }      
       
      if (events & SBP_PERIODIC_EVT)
      {
          Util_startClock(&periodicClock);

          // Perform periodic application task
          SimpleBLEPeripheral_performPeriodicTask();
      }
 
#ifdef FEATURE_OAD
      if (events & SBP_QUEUE_PING_EVT)
      {
        while (!Queue_empty(hOadQ))
        {
          oadTargetWrite_t *oadWriteEvt = Queue_get(hOadQ);

          // Identify new image.
          if (oadWriteEvt->event == OAD_WRITE_IDENTIFY_REQ)
          {
            OAD_imgIdentifyWrite(oadWriteEvt->connHandle, oadWriteEvt->pData);
          }
          // Write a next block request.
          else if (oadWriteEvt->event == OAD_WRITE_BLOCK_REQ)
          {
            OAD_imgBlockWrite(oadWriteEvt->connHandle, oadWriteEvt->pData);
          }

          // Free buffer.
          ICall_free(oadWriteEvt);
        }
      }
#endif //FEATURE_OAD      
      
    if (events & SafeNotify) 
      //=== 報平安 === 
      //累積滿30分鐘+穩定狀態  就報平安  
      {
        events &= ~SafeNotify;

        Time();       
        Voltage();
                      
        routerData[30]=2;//安全回報
     
        PIN_setOutputValue(hSbpPins, Board_LNA,0); // 2592 TX mode
            
        GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData);
           
           //廣播       
        uint8_t advopen = TRUE;
        GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advopen);
                      
         
       for(int x=0;x<20000;x++)
         {
       for(int y=0;y<10000;y++)
         {        }
                   }
           
         PIN_setOutputValue(hSbpPins, Board_LNA,1); // 2592 RX mode
            
         GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData);
         
         //關廣播          
         uint8_t advclose = FALSE;
         GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advclose); 
         
         routerData[30]=0;//安全回報
      }
    }
  }
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_processStackMsg
 *
 * @brief   Process an incoming stack message.
 *
 * @param   pMsg - message to process
 *
 * @return  TRUE if safe to deallocate incoming message, FALSE otherwise.
 */
static uint8_t SimpleBLEPeripheral_processStackMsg(ICall_Hdr *pMsg)
{
  uint8_t safeToDealloc = TRUE;

  switch (pMsg->event)
  {
    case GATT_MSG_EVENT:
      // Process GATT message
      safeToDealloc = SimpleBLEPeripheral_processGATTMsg((gattMsgEvent_t *)pMsg);
      break;

    case HCI_GAP_EVENT_EVENT:
      {

        // Process HCI message
        switch(pMsg->status)
        {
          case HCI_COMMAND_COMPLETE_EVENT_CODE:
            // Process HCI Command Complete Event
            {

#if !defined (USE_LL_CONN_PARAM_UPDATE)
              // This code will disable the use of the LL_CONNECTION_PARAM_REQ
              // control procedure (for connection parameter updates, the
              // L2CAP Connection Parameter Update procedure will be used
              // instead). To re-enable the LL_CONNECTION_PARAM_REQ control
              // procedures, define the symbol USE_LL_CONN_PARAM_UPDATE
              // The L2CAP Connection Parameter Update procedure is used to
              // support a delta between the minimum and maximum connection
              // intervals required by some iOS devices.

              // Parse Command Complete Event for opcode and status
              hciEvt_CmdComplete_t* command_complete = (hciEvt_CmdComplete_t*) pMsg;
              uint8_t   pktStatus = command_complete->pReturnParam[0];

              //find which command this command complete is for
              switch (command_complete->cmdOpcode)
              {
                case HCI_LE_READ_LOCAL_SUPPORTED_FEATURES:
                  {
                    if (pktStatus == SUCCESS)
                    {
                      uint8_t featSet[8];

                      // Get current feature set from received event (bits 1-9
                      // of the returned data
                      memcpy( featSet, &command_complete->pReturnParam[1], 8 );

                      // Clear bit 1 of byte 0 of feature set to disable LL
                      // Connection Parameter Updates
                      CLR_FEATURE_FLAG( featSet[0], LL_FEATURE_CONN_PARAMS_REQ );

                      // Update controller with modified features
                      HCI_EXT_SetLocalSupportedFeaturesCmd( featSet );
                    }
                  }
                  break;

                default:
                  //do nothing
                  break;
              }
#endif // !defined (USE_LL_CONN_PARAM_UPDATE)

            }
            break;

          case HCI_BLE_HARDWARE_ERROR_EVENT_CODE:
            AssertHandler(HAL_ASSERT_CAUSE_HARDWARE_ERROR,0);
            break;

          default:
            break;
        }
      }
      break;

      default:
        // do nothing
        break;

    }

  return (safeToDealloc);
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_processGATTMsg
 *
 * @brief   Process GATT messages and events.
 *
 * @return  TRUE if safe to deallocate incoming message, FALSE otherwise.
 */
static uint8_t SimpleBLEPeripheral_processGATTMsg(gattMsgEvent_t *pMsg)
{
  // See if GATT server was unable to transmit an ATT response
  if (pMsg->hdr.status == blePending)
  {
    // No HCI buffer was available. Let's try to retransmit the response
    // on the next connection event.
    if (HCI_EXT_ConnEventNoticeCmd(pMsg->connHandle, selfEntity,
                                   SBP_HCI_CONN_EVT_END_EVT) == SUCCESS)
    {
      // First free any pending response
      SimpleBLEPeripheral_freeAttRsp(FAILURE);

      // Hold on to the response message for retransmission
      pAttRsp = pMsg;

      // Don't free the response message yet
      return (FALSE);
    }
  }
  else if (pMsg->method == ATT_FLOW_CTRL_VIOLATED_EVENT)
  {
    // ATT request-response or indication-confirmation flow control is
    // violated. All subsequent ATT requests or indications will be dropped.
    // The app is informed in case it wants to drop the connection.
  }
  else if (pMsg->method == ATT_MTU_UPDATED_EVENT)
  {
    // MTU size updated
  }

  // Free message payload. Needed only for ATT Protocol messages
  GATT_bm_free(&pMsg->msg, pMsg->method);

  // It's safe to free the incoming message
  return (TRUE);
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_sendAttRsp
 *
 * @brief   Send a pending ATT response message.
 *
 * @param   none
 *
 * @return  none
 */
static void SimpleBLEPeripheral_sendAttRsp(void)
{
  // See if there's a pending ATT Response to be transmitted
  if (pAttRsp != NULL)
  {
    uint8_t status;

    // Increment retransmission count
    rspTxRetry++;

    // Try to retransmit ATT response till either we're successful or
    // the ATT Client times out (after 30s) and drops the connection.
    status = GATT_SendRsp(pAttRsp->connHandle, pAttRsp->method, &(pAttRsp->msg));
    if ((status != blePending) && (status != MSG_BUFFER_NOT_AVAIL))
    {
      // Disable connection event end notice
      HCI_EXT_ConnEventNoticeCmd(pAttRsp->connHandle, selfEntity, 0);

      // We're done with the response message
      SimpleBLEPeripheral_freeAttRsp(status);
    }
    else
    {
      // Continue retrying
    }
  }
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_freeAttRsp
 *
 * @brief   Free ATT response message.
 *
 * @param   status - response transmit status
 *
 * @return  none
 */
static void SimpleBLEPeripheral_freeAttRsp(uint8_t status)
{
  // See if there's a pending ATT response message
  if (pAttRsp != NULL)
  {
    // See if the response was sent out successfully
    if (status == SUCCESS)
    {
    }
    else
    {
      // Free response payload
      GATT_bm_free(&pAttRsp->msg, pAttRsp->method);
    }

    // Free response message
    ICall_freeMsg(pAttRsp);

    // Reset our globals
    pAttRsp = NULL;
    rspTxRetry = 0;
  }
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_processAppMsg
 *
 * @brief   Process an incoming callback from a profile.
 *
 * @param   pMsg - message to process
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_processAppMsg(sbpEvt_t *pMsg)
{
  switch (pMsg->hdr.event)
  {
    case SBP_STATE_CHANGE_EVT:
      {
        SimpleBLEPeripheral_processStateChangeEvt((gaprole_States_t)pMsg->
                                                hdr.state);
      }
      break;

    case SBP_CHAR_CHANGE_EVT:
      {
        SimpleBLEPeripheral_processCharValueChangeEvt(pMsg->hdr.state);
      }
      break;
      
    default:
      // Do nothing.
      break;
  }
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_stateChangeCB
 *
 * @brief   Callback from GAP Role indicating a role state change.
 *
 * @param   newState - new state
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_stateChangeCB(gaprole_States_t newState)
{
  SimpleBLEPeripheral_enqueueMsg(SBP_STATE_CHANGE_EVT, newState, 0);
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_processStateChangeEvt
 *
 * @brief   Process a pending GAP Role state change event.
 *
 * @param   newState - new state
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_processStateChangeEvt(gaprole_States_t newState)
{
#ifdef PLUS_BROADCASTER
  static bool firstConnFlag = false;
#endif // PLUS_BROADCASTER

  switch ( newState )
  {
    case GAPROLE_STARTED:
      {
        uint8_t ownAddress[B_ADDR_LEN];
        uint8_t systemId[DEVINFO_SYSTEM_ID_LEN];

        GAPRole_GetParameter(GAPROLE_BD_ADDR, ownAddress);

        // use 6 bytes of device address for 8 bytes of system ID value
        systemId[0] = ownAddress[0];
        systemId[1] = ownAddress[1];
        systemId[2] = ownAddress[2];

        // set middle bytes to zero
        systemId[4] = 0x00;
        systemId[3] = 0x00;

        // shift three bytes up
        systemId[7] = ownAddress[5];
        systemId[6] = ownAddress[4];
        systemId[5] = ownAddress[3];

        DevInfo_SetParameter(DEVINFO_SYSTEM_ID, DEVINFO_SYSTEM_ID_LEN, systemId);
      }
      break;

    case GAPROLE_ADVERTISING:
      break;

#ifdef PLUS_BROADCASTER
    // After a connection is dropped, a device in PLUS_BROADCASTER will continue
    // sending non-connectable advertisements and shall send this change of
    // state to the application.  These are then disabled here so that sending
    // connectable advertisements can resume.
    case GAPROLE_ADVERTISING_NONCONN:
      {
        uint8_t advertEnabled = FALSE;

        // Disable non-connectable advertising.
        GAPRole_SetParameter(GAPROLE_ADV_NONCONN_ENABLED, sizeof(uint8_t),
                           &advertEnabled);

        advertEnabled = TRUE;

        // Enabled connectable advertising.
        GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),
                             &advertEnabled);

        // Reset flag for next connection.
        firstConnFlag = false;

        SimpleBLEPeripheral_freeAttRsp(bleNotConnected);
      }
      break;
#endif //PLUS_BROADCASTER

    case GAPROLE_CONNECTED:
      {
        linkDBInfo_t linkInfo;
        uint8_t numActive = 0;

        Util_startClock(&periodicClock);

        numActive = linkDB_NumActive();

        // Use numActive to determine the connection handle of the last
        // connection
        if ( linkDB_GetInfo( numActive - 1, &linkInfo ) == SUCCESS )
        {
        }
        else
        {
          uint8_t peerAddress[B_ADDR_LEN];

          GAPRole_GetParameter(GAPROLE_CONN_BD_ADDR, peerAddress);
        }

        #ifdef PLUS_BROADCASTER
          // Only turn advertising on for this state when we first connect
          // otherwise, when we go from connected_advertising back to this state
          // we will be turning advertising back on.
          if (firstConnFlag == false)
          {
            uint8_t advertEnabled = FALSE; // Turn on Advertising

            // Disable connectable advertising.
            GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),
                                 &advertEnabled);

            // Set to true for non-connectable advertising.
            advertEnabled = TRUE;

            // Enable non-connectable advertising.
            GAPRole_SetParameter(GAPROLE_ADV_NONCONN_ENABLED, sizeof(uint8_t),
                                 &advertEnabled);
            firstConnFlag = true;
          }
        #endif // PLUS_BROADCASTER
      }
      break;

    case GAPROLE_CONNECTED_ADV:
      break;

    case GAPROLE_WAITING:
      Util_stopClock(&periodicClock);
      SimpleBLEPeripheral_freeAttRsp(bleNotConnected);
      break;

    case GAPROLE_WAITING_AFTER_TIMEOUT:
      SimpleBLEPeripheral_freeAttRsp(bleNotConnected);

      #ifdef PLUS_BROADCASTER
        // Reset flag for next connection.
        firstConnFlag = false;
      #endif // PLUS_BROADCASTER
      break;

    case GAPROLE_ERROR:
      break;

    default:
      break;
  }

}

#ifndef FEATURE_OAD_ONCHIP
/*********************************************************************
 * @fn      SimpleBLEPeripheral_charValueChangeCB
 *
 * @brief   Callback from Simple Profile indicating a characteristic
 *          value change.
 *
 * @param   paramID - parameter ID of the value that was changed.
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_charValueChangeCB(uint8_t paramID)
{
  SimpleBLEPeripheral_enqueueMsg(SBP_CHAR_CHANGE_EVT, paramID, 0);
}
#endif //!FEATURE_OAD_ONCHIP

/*********************************************************************
 * @fn      SimpleBLEPeripheral_processCharValueChangeEvt
 *
 * @brief   Process a pending Simple Profile characteristic value change
 *          event.
 *
 * @param   paramID - parameter ID of the value that was changed.
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_processCharValueChangeEvt(uint8_t paramID)
{
//#ifndef FEATURE_OAD_ONCHIP
  #ifndef FEATURE_OAD
  uint8_t newValue;

  switch(paramID)
  {
    case SIMPLEPROFILE_CHAR1:
      SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR1, &newValue);

      break;

    case SIMPLEPROFILE_CHAR3:
      SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &newValue3);
      
      if( newValue3[0]=='#' && newValue3[2]==0x87 && newValue3[3]==0x33 && newValue3[4]==0x43 && newValue3[5]==0x78)  //使用者停車階段
      {          
          //國家+總類 newValue3[6] 未使用    
        
          //車牌----------------
          routerData[20]=newValue3[7];//中文代碼
          routerData[21]=newValue3[8];//英文   
          // 以下4byt 共8碼(手機端36轉16進來，直接傳出 ) 
          routerData[22]=newValue3[9];
          routerData[23]=newValue3[10];
          routerData[24]=newValue3[11];
          routerData[25]=newValue3[12];
          //-----   
          RequireNum  = newValue3[13]; //特殊需求 [28]後                                                
          routerData[30]=newValue3[14];//車位監控              
      }

      if( newValue3[0]=='&' && newValue3[2]==0x12 && newValue3[3]==0x34 && newValue3[4]==0x56 && newValue3[5]==0x78) //設定階段連線經緯度
      {      
          PIN_setOutputValue(hSbpPins, Board_LED_G ,0); //關設定藍燈
          PIN_setOutputValue(hSbpPins, Board_LED_R ,0); //關設定紅燈
          init_flag=0;        
          
          IosWriteData[0]=1; //flash 已被寫入            
          IosWriteData[1]=newValue3[14];//經H
          IosWriteData[2]=newValue3[15];//經L          
          IosWriteData[3]=newValue3[9];//緯H
          IosWriteData[4]=newValue3[10];//緯L      
          IosWriteData[5]=newValue3[17];//高M (樓層)
          IosWriteData[6]=newValue3[18];//高L (高度)         
          IosWriteData[7]=newValue3[16];//區域碼          
          IosWriteData[8]=newValue3[11];//車位英文
          IosWriteData[9]=newValue3[12];//車位數字
          IosWriteData[10]=newValue3[13];//車位數字
                 
          osal_snv_write(0x80, 11, &IosWriteData[0]);
   
          //寫入時間 傳進16進制 轉10進
          GUA_Timer.hour = (newValue3[6]&0X0F) + ((newValue3[6]&0XF0)*10) ; //不用寫入flash   
          GUA_Timer.minutes =(newValue3[7]&0X0F) + ((newValue3[7]&0XF0)*10) ;
          GUA_Timer.seconds = (newValue3[8]&0X0F) + ((newValue3[8]&0XF0)*10) ;
          GUA_RTC_Set(&GUA_Timer);       
          
          //routerData[8][9] 時間於廣播前由內部運算後給出        
          flashData = IosWriteData[0];
          routerData[10] = IosWriteData[1];//經H
          routerData[11] = IosWriteData[2];//經L
          routerData[12] = IosWriteData[3];//緯H
          routerData[13] = IosWriteData[4];//緯L
          routerData[14] = IosWriteData[5];//高M(樓層)  小於100
          routerData[15] = IosWriteData[6];//高L(高度)        
          routerData[16] = IosWriteData[7];//區域碼         
          routerData[17] = IosWriteData[8];//車位英文
          routerData[18] = IosWriteData[9];//車位數字
          routerData[19] = IosWriteData[10];//車位數字
      
      }
 
      GAPRole_TerminateConnection();//斷線指令          
         
      //LCD_WRITE_STRING_VALUE("Char 3:", (uint16_t)newValue, 10, LCD_PAGE4);

      break;

    default:
      // should not reach here!
      break;
  }
//#endif //!FEATURE_OAD_ONCHIP
#endif //!FEATURE_OAD
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_performPeriodicTask
 *
 * @brief   Perform a periodic application task. This function gets called
 *          every five seconds (SBP_PERIODIC_EVT_PERIOD). In this example,
 *          the value of the third characteristic in the SimpleGATTProfile
 *          service is retrieved from the profile, and then copied into the
 *          value of the the fourth characteristic.
 *
 * @param   None.
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_performPeriodicTask(void)
{
//#ifndef FEATURE_OAD_ONCHIP
#ifndef FEATURE_OAD

  uint8_t valueToCopy;

  // Call to retrieve the value of the third characteristic in the profile
  if (SimpleProfile_GetParameter(SIMPLEPROFILE_CHAR3, &valueToCopy) == SUCCESS)
  {
    // Call to set that value of the fourth characteristic in the profile.
    // Note that if notifications of the fourth characteristic have been
    // enabled by a GATT client device, then a notification will be sent
    // every time this function is called.
    SimpleProfile_SetParameter(SIMPLEPROFILE_CHAR4, sizeof(uint8_t),
                               &valueToCopy);
  }
//#endif //!FEATURE_OAD_ONCHIP
#endif //!FEATURE_OAD
}

#ifdef FEATURE_OAD
/*********************************************************************
 * @fn      SimpleBLEPeripheral_processOadWriteCB
 *
 * @brief   Process a write request to the OAD profile.
 *
 * @param   event      - event type:
 *                       OAD_WRITE_IDENTIFY_REQ
 *                       OAD_WRITE_BLOCK_REQ
 * @param   connHandle - the connection Handle this request is from.
 * @param   pData      - pointer to data for processing and/or storing.
 *
 * @return  None.
 */
void SimpleBLEPeripheral_processOadWriteCB(uint8_t event, uint16_t connHandle,
                                           uint8_t *pData)
{
  oadTargetWrite_t *oadWriteEvt = ICall_malloc( sizeof(oadTargetWrite_t) + \
                                             sizeof(uint8_t) * OAD_PACKET_SIZE);

  if ( oadWriteEvt != NULL )
  {
    oadWriteEvt->event = event;
    oadWriteEvt->connHandle = connHandle;

    oadWriteEvt->pData = (uint8_t *)(&oadWriteEvt->pData + 1);
    memcpy(oadWriteEvt->pData, pData, OAD_PACKET_SIZE);

    Queue_put(hOadQ, (Queue_Elem *)oadWriteEvt);

    // Post the application's event.  For OAD, no event flag is used.
    Event_post(syncEvent, SBP_QUEUE_PING_EVT);
  }
  else
  {
    // Fail silently.
  }
}
#endif //FEATURE_OAD

/*********************************************************************
 * @fn      SimpleBLEPeripheral_clockHandler
 *
 * @brief   Handler function for clock timeouts.
 *
 * @param   arg - event type
 *
 * @return  None.
 */
static void SimpleBLEPeripheral_clockHandler(UArg arg)
{
  // Wake up the application.
  Event_post(syncEvent, arg);
}

/*********************************************************************
 * @fn      SimpleBLEPeripheral_enqueueMsg
 *
 * @brief   Creates a message and puts the message in RTOS queue.
 *
 * @param   event - message event.
 * @param   state - message state.
 * @param   pData - message data pointer.
 *
 * @return  TRUE or FALSE
 */
static uint8_t SimpleBLEPeripheral_enqueueMsg(uint8_t event, uint8_t state,
                                           uint8_t *pData)
{
  sbpEvt_t *pMsg = ICall_malloc(sizeof(sbpEvt_t));

  // Create dynamic pointer to message.
  if (pMsg)
  {
    pMsg->hdr.event = event;
    pMsg->hdr.state = state;
    pMsg->pData = pData;

    // Enqueue the message.
    return Util_enqueueMsg(appMsgQueue, syncEvent, (uint8_t *)pMsg);
  }

  return FALSE;
}
/*********************************************************************
*********************************************************************/
//讀mac

static void GUA_Read_Mac(uint8 *pGUA_Address)        
{    
  uint32_t nGUA_Mac0 = HWREG(FCFG1_BASE + FCFG1_O_MAC_BLE_0);  
  uint32_t nGUA_Mac1 = HWREG(FCFG1_BASE + FCFG1_O_MAC_BLE_1);  
    
  pGUA_Address[5] = nGUA_Mac0;  
  pGUA_Address[4] = nGUA_Mac0 >> 8;  
  pGUA_Address[3] = nGUA_Mac0 >> 16;  
  pGUA_Address[2] = nGUA_Mac0 >> 24;  
  pGUA_Address[1] = nGUA_Mac1;  
  pGUA_Address[0] = nGUA_Mac1 >> 8;  
}    
  

/*********************************************************************
*********************************************************************/

static void AMR_Read()
{
      uint8 Data[2]={0};//={0x0A,0x01};//addr,buf 
      Data[0]= 0x0A;
      Data[1]= 0x01;
      bspI2cWrite(Data,2);//(uint8_t *data, uint8_t len)     
      
      uint8 txBuf=0x00;//0X00  0x0B
      bspI2cWriteRead(&txBuf,1,&ReadResult,1);//(uint8_t *wdata, uint8_t wlen, uint8_t *rdata, uint8_t rlen)
 
      //------X--------
      txBuf=0x03;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_xL,1);       

      txBuf=0x04;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_xH,1);  
      
      result_x=(((uint16)ReadResult_xH<<8)|(ReadResult_xL));
      
      if (ReadResult_xH > 0x1F)
      { //0001 1111 
         sign_x=1;
         result_x=~result_x+1;
         result_x=(uint16)((result_x*0.3)+0.5);
         ReadResult_xH = result_x>>8;//傳出去用
         ReadResult_xL = result_x & 0xFF;//傳出去用
         result_x=-result_x;//內部使用負數     
      }
      else
      {
         sign_x=0;         
         result_x=(uint16)((result_x*0.3)+0.5);
         ReadResult_xH = result_x>>8;//傳出去用
         ReadResult_xL = result_x & 0xFF;//傳出去用 
      }

      //------Y--------  
      txBuf=0x05;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_yL,1); 
       
      txBuf=0x06;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_yH,1); 
      
      result_y=(((uint16)ReadResult_yH<<8)|(ReadResult_yL));
      
      if (ReadResult_yH > 0x1F)
      {
         sign_y=1;          
         result_y=~result_y+1;
         result_y=(uint16)((result_y*0.3)+0.5);
         ReadResult_yH = result_y>>8;//傳出去用
         ReadResult_yL = result_y & 0xFF;//傳出去用
         result_y=-result_y;//內部使用負數        
      }
      else
      {
         sign_y=0;
        
         result_y=(uint16)((result_y*0.3)+0.5);
         ReadResult_yH = result_y>>8;//傳出去用
         ReadResult_yL = result_y & 0xFF;//傳出去用
      }
      
        
      // Y值差異量>15且之後十筆狀態差意小 表有狀態變動 (且由大變小 表車停入)(由小變大 表車移走) (此為放置水平，桌面測試狀況)
      // 必須取出每個的初始值，來創一個固定的有車無車量。
  
      //------Z-------- 
      txBuf=0x07;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_zL,1); 
      
      txBuf=0x08;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_zH,1); 
 
      result_z=(((uint16)ReadResult_zH<<8)|(ReadResult_zL));
          
      if (ReadResult_zH > 0x1F)
      {
         sign_z=1;        
         result_z=~result_z+1;
         result_z=(uint16)((result_z*0.3)+0.5);
         ReadResult_zH = result_z>>8;//傳出去用
         ReadResult_zL = result_z & 0xFF;//傳出去用
         result_z=-result_z;   //內部使用負數                
      }
      else
      {
         sign_z=0;       
         result_z=(uint16)((result_z*0.3)+0.5);
         ReadResult_zH = result_z>>8;//傳出去用
         ReadResult_zL = result_z & 0xFF;//傳出去用
      }
       
      //------Total--------
        before_result_total = result_total;// 紀錄上一筆值
       // result_total = sqrt((result_x * result_x) + (result_y * result_y) + (result_z * result_z)); //+0.5
       
        before_Magnetic = Magnetic;// 紀錄上一筆值
        Magnetic=sqrt(((result_x-Xstd) *(result_x-Xstd)) + ((result_y-Ystd) * (result_y-Ystd)) + ((result_z-Zstd) *(result_z-Zstd) ));
             
        ReadResult_AH = ((int)Magnetic)>>8;//傳出去用(廣播)
        ReadResult_AL =((int) Magnetic)& 0xFF;//傳出去用(廣播)
        
        routerData[26]=ReadResult_AH;
        routerData[27]=ReadResult_AL;
        
        GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData);
      
     //------T--------  //未換算直接輸出
      txBuf=0x1C;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_tL,1);      
          
      txBuf=0x1D;   
      bspI2cWriteRead(&txBuf,1,&ReadResult_tH,1); 
      
      result_t=(((uint16)ReadResult_tH<<8)|(ReadResult_tL));              
}

static void Time()
{
//時間運算  
GUA_RTC_Get(&GUA_Timer);
           
timet[0]  =GUA_Timer.hour;
timet[1]  =GUA_Timer.minutes;
timet[2]  =GUA_Timer.seconds;            
            
routerData[8]=timet[1];
routerData[9]=timet[2];
//時間運算 
}

static void Calibration()
{
           
         //i2c第一次讀值，會是零，非第一次就進來來，要將initCount=-1 改成0。
         OccupiedStateCount=0; 
         VacantStateCount=0; 
         initCount++;
         
         //基準值累計
         VacantAdd_x+=result_x;
         VacantAdd_y+=result_y;
         VacantAdd_z+=result_z;
             
         PIN_setOutputValue(hSbpPins, Board_LED_R , (initCount%2)); 
         
         if(initCount==Corrections_Num) //10次
         {           
           //基準值校正    
            Xstd = VacantAdd_x/Corrections_Num;  
            Ystd = VacantAdd_y/Corrections_Num; 
            Zstd = VacantAdd_z/Corrections_Num;
            // Vacant_standard_total=VacantAdd_total/Corrections_Num;
         
            routerData[26]=0x00;//尚未計算出xstd.ystd.zstd
            routerData[27]=0x00;//尚未計算出xstd.ystd.zstd  
            routerData[28]=(init_state<<4);
            //routerData[28]=(init_state<<4)|(EMF_average>>8);
            //routerData[29]=(EMF_average);      
            
            GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData);
            
            ParkingState=init_state;
            
            //廣播車位初始
           uint8_t advopen = TRUE;
           GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advopen);
            
         } 
         
         if(initCount==Corrections_Num+30)//3秒關閉廣播 
         {            
            //基準值校正完畢  
            VacantAdd_x=0;//歸零下次重新計算平均
            VacantAdd_y=0;//歸零下次重新計算平均
            VacantAdd_z=0;//歸零下次重新計算平均
            VacantAdd_total=0;//歸零下次重新計算平均
            initCount=-1;//歸零下次重新計算平均
            init_flag=1;
            
            PIN_setOutputValue(hSbpPins, Board_LNA,1); // 2592 RX mode
            uint8_t advclose = FALSE; //關廣播
            GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advclose);                     
            PIN_setOutputValue(hSbpPins, Board_LED_R , led_close);
            
            Util_stopClock(&myClock_Regulate);          
         }
         
}

static void Car_in()
{
    IsOccupiedNotify = 1;   
    OccupiedStateCount++;   
  
          UnknownCount=0;
          ErrorCount=0;
          VacantStateCount=0;  

          // 若Vacant未校正完成，已有Occupied判斷，此次校正不予採計。基準值累計必須歸零。
          VacantAdd_x=0;//歸零下次重新計算平均
          VacantAdd_y=0;//歸零下次重新計算平均
          VacantAdd_z=0;//歸零下次重新計算平均
          VacantAdd_total=0;//歸零下次重新計算平均
          
            
         if(OccupiedStateCount == N_value )//必須要完成轉換狀態後才能在進入  //註解掉可重覆廣播  //未改變廣播狀態不在廣播
         {    
           Vacant_flag=0;//完成所有流程，才能讓它再次進去轉態處
           
           Time();
             
            routerData[26]=ReadResult_AH;
            routerData[27]=ReadResult_AL;
            routerData[28]=(Occupied_State<<4);
            //routerData[28]=(Occupied_State<<4)|(EMF_average>>8);
            //routerData[29]=(EMF_average);  
            
            PIN_setOutputValue(hSbpPins, Board_LNA,0); // 2592 TX mode
            GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData); 

            //廣播車停入  
            uint8_t advopen = TRUE;
            GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advopen);
            
            LoRa();
            
              PIN_setOutputValue(hSbpPins, Board_LED_R,1);  //設定紅燈亮  
              PIN_setOutputValue(hSbpPins, Board_LED_G,0); //設定綠燈亮   
              PIN_setOutputValue(hSbpPins, LED_Control,1); //0設定三顆都亮
              
              ParkingState=Occupied_State;            

         }      
                
         if(OccupiedStateCount == N_value+3)// 廣播3s    ///1s 1
         {  
                   
             //占用流程完畢        
                  Occupied_flag=1;        
                  
                  StableSignal=unknown;                
                  StableCheck=unknown;
                  StateBufferChange=false;

                   IsOccupiedNotify =0;   
                   IsVacantNotify =0;
    
                  PIN_setOutputValue(hSbpPins, Board_LNA,1); // 2592 RX mode
                  uint8_t advclose = FALSE; //關廣播
                  GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advclose); 
           
              PIN_setOutputValue(hSbpPins, Board_LED_R,0);  //設定紅燈亮  
              PIN_setOutputValue(hSbpPins, Board_LED_G,0); //設定綠燈亮   
              PIN_setOutputValue(hSbpPins, LED_Control,1); //0設定三顆都亮
              Util_stopClock(&myClock_Parking);    
          }                 
}

static void Car_out()
{
    IsVacantNotify =1;
    VacantStateCount++;      

          UnknownCount=0;
          ErrorCount=0;
          OccupiedStateCount=0;         
                  
        // 若Occupied未校正完成，已有Vacant判斷，基準值累計必須歸零。 
           OccupiedAdd_x=0;//歸零下次重新計算平均
           OccupiedAdd_y=0;//歸零下次重新計算平均
           OccupiedAdd_z=0;//歸零下次重新計算平均
           OccupiedAdd_total=0;//歸零下次重新計算平均            
          
         if(VacantStateCount == N_value)//必須要完成轉換狀態後才能在進入  //註解掉可重覆廣播  //未改變廣播狀態不在廣播
         {      
           Occupied_flag=0;//完成所有流程，才能讓它再次進去轉態處
            
            Time();
      
            routerData[26]=ReadResult_AH;
            routerData[27]=ReadResult_AL;
            routerData[28]=(Vacant_State<<4);
            
            //routerData[28]=(Vacant_State<<4)|(EMF_average>>8);
           // routerData[29]=(EMF_average);  
                        
            GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData);
                   
            PIN_setOutputValue(hSbpPins, Board_LNA,0); // 2592 TX mode
            //廣播車位空  
            uint8_t advopen = TRUE;
            GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advopen);  
            
            LoRa();
            
            PIN_setOutputValue(hSbpPins, Board_LED_R ,0 ); 
            PIN_setOutputValue(hSbpPins, Board_LED_G ,1 );
            PIN_setOutputValue(hSbpPins, LED_Control,1); //0設定三顆都亮
            
            ParkingState=Vacant_State; 
         
         }
     
         if(VacantStateCount== N_value+3)//  廣播3s 
         {                                      
             //空位流程完畢
                  
                  //StableSignal=unknown;     
                  //StableCheck=unknown;
                  //StateBufferChange=false;
                  
                   PIN_setOutputValue(hSbpPins, Board_LNA,1); // 2592 RX mode
                   uint8_t advclose = FALSE; //關廣播
                   GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advclose);
                  
                   PIN_setOutputValue(hSbpPins, Board_LED_R ,0 ); 
                   PIN_setOutputValue(hSbpPins, Board_LED_G ,0 );
                   PIN_setOutputValue(hSbpPins, LED_Control,1); //0設定三顆都亮
                   Util_stopClock(&myClock_Parking);
         }    
         
         if(VacantStateCount== N_value+5)
         {
            Vacant_flag=1;  
            IsVacantNotify=0;   
            IsOccupiedNotify =0; 
           
            Util_startClock(&myClock_Regulate);
            Util_stopClock(&myClock_Parking);             
         }
         
}

static void Car_Unknow()
{
  IsUnknowNotify =1;
  UnknownCount++; 
  
//若只改變buffer狀態，未轉態會累積，必須歸零
        OccupiedStateCount=0;
        VacantStateCount=0; 
        ErrorCount=0;       
        
        
    if(UnknownCount==2)
        { 
        Time();
             
            routerData[26]=ReadResult_AH;
            routerData[27]=ReadResult_AL;
            routerData[28]=(unknown_State<<4);
                                   
            GAPRole_SetParameter(GAPROLE_ADVERT_DATA, sizeof(routerData),routerData);
            
            PIN_setOutputValue(hSbpPins, Board_LNA,0); // 2592 TX mode
            
            //廣播車位未知  
            uint8_t advopen = TRUE;
            GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advopen);  
            
            LoRa();
            ParkingState=unknown_State;
            
     }
     if(UnknownCount==5)
        {
        PIN_setOutputValue(hSbpPins, Board_LNA,1); // 2592 RX mode
                   
        uint8_t advclose = FALSE; //關廣播
        GAPRole_SetParameter(GAPROLE_ADVERT_ENABLED, sizeof(uint8_t),&advclose); 
        }              
}

static void LoRa()
{
             for (int x=0;x<31;x++)
           {
             txbuf[x]=routerData[x];
           }
         UART_write(UART_handle, txbuf, 31); 
}

static void Voltage()
{
init_adc();
AUXADCGenManualTrigger();
ADC_Result = AUXADCReadFifo();//讀到的值 最大4096
AUXADCFlushFifo();//清空flash
AUXADCDisable();//關閉ADC

routerData[29]=(ADC_Result>>4)&0xFF;
}